import os
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
import httpx

from aiogram.client.default import DefaultBotProperties
from prompts import create_friendly_feedback  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ prompts.py

load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

if not TELEGRAM_BOT_TOKEN or not OPENROUTER_API_KEY:
    raise ValueError("–í .env –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENROUTER_API_KEY")

bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

dp = Dispatcher()
router = Router()
dp.include_router(router)

OPENROUTER_URL = "https://openrouter.ai/api/v1/chat/completions"

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –º–µ–Ω—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—ë—Ç –∫–∞–∂–¥—ã–π —Ä–∞–∑ —Ä–∞–∑–Ω—É—é —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —Å—Ç–∞–∂—ë—Ä—É –ø–æ –µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º —Ä–∞–±–æ—Ç—ã. "
    "–û–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ AHT, –î–£ –∏ Transfer –¥–æ–ª–∂–Ω—ã —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ 100%, –∞ –ù–∞–≤–∏–≥–∞—Ü–∏—è ‚Äî –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 45%, "
    "–ø–æ—è—Å–Ω–∏, —á—Ç–æ –∑–Ω–∞—á–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∏–∂–µ —ç—Ç–∏—Ö –ø–æ—Ä–æ–≥–æ–≤ –∏ –∫–∞–∫–∏–µ —ç—Ç–æ –Ω–µ—Å—ë—Ç –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è. "
    "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ö–Ω–∏–∫—É ¬´–±—É—Ç–µ—Ä–±—Ä–æ–¥¬ª: –Ω–∞—á–Ω–∏ —Å –ø–æ—Ö–≤–∞–ª—ã, –∑–∞—Ç–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —É–∫–∞–∂–∏ –Ω–∞ –∑–æ–Ω—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏, "
    "–∏ –∑–∞–≤–µ—Ä—à–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π, —á—Ç–æ–±—ã —Å—Ç–∞–∂—ë—Ä –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –¥–ª—è —Ä–æ—Å—Ç–∞. "
    "–û–±—Ä–∞—â–∞–π—Å—è –ø–æ –∏–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–π –∂–∏–≤–æ–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –∏—Å–∫—Ä–µ–Ω–Ω–∏–π —Ç–æ–Ω. "
    "–ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:\n"
    "- –ï—Å–ª–∏ AHT –Ω–∏–∂–µ 100%, –ø–æ—Å–æ–≤–µ—Ç—É–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é IVR –∏–ª–∏ —á–∞—Ç-–±–æ—Ç–æ–≤, –∞ —Ç–∞–∫–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
    "- –ï—Å–ª–∏ –î–£ –Ω–∏–∂–µ 100%, –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –∞–∫—Ç–∏–≤–Ω–æ —Å–ª—É—à–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞, –∑–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—è–≤–ª—è—Ç—å —ç–º–ø–∞—Ç–∏—é –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã.\n"
    "- –ï—Å–ª–∏ –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∏–∂–µ 45%, –ø–æ–¥—á–µ—Ä–∫–Ω–∏, —á—Ç–æ —ç—Ç–æ –∑–æ–Ω–∞ —Ä–æ—Å—Ç–∞ –∏ –≤–∞–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ñ—Ä–∞–∑–æ–π –¥–ª—è –ø—Ä–æ—Å—å–±—ã –æ—Ü–µ–Ω–∫–∏, –±–æ–ª—å—à–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å.\n"
    "- –ï—Å–ª–∏ Transfer –Ω–∏–∂–µ 100%, –ø–æ—Å–æ–≤–µ—Ç—É–π –∏–∑–±–µ–≥–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏ –≤—Å–µ–≥–¥–∞ —É—Ç–æ—á–Ω—è—Ç—å —É –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∏–∂–µ 70%.\n"
    "–î–µ–ª–∞–π —Ç–µ–∫—Å—Ç –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º –∏ –æ—á–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º, —á—Ç–æ–±—ã —Å—Ç–∞–∂—ë—Ä –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª –∑–∞–±–æ—Ç—É –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
)


@router.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ –∏–º—è —Å—Ç–∞–∂—ë—Ä–∞ –∏ –µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.\n\n"
        "–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
        "–ò–≤–∞–Ω\n"
        "AHT: 85%\n"
        "–î–£: 92%\n"
        "–ù–∞–≤–∏–≥–∞—Ü–∏—è: 75%\n"
        "Transfer: 10%\n"
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (–ø–æ –∂–µ–ª–∞–Ω–∏—é): —á–∞—Å—Ç–æ –ø–µ—Ä–µ–±–∏–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞"
    )

@router.message(F.text)
async def handle_metrics(message: Message):
    text = message.text.strip()
    lines = text.split("\n")

    if len(lines) < 5:
        await message.answer(
            "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∏–º—è –∏ –≤—Å–µ —á–µ—Ç—ã—Ä–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è (AHT, –î–£, –ù–∞–≤–∏–≥–∞—Ü–∏—è, Transfer) –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ò–≤–∞–Ω\nAHT: 85%\n–î–£: 92%\n–ù–∞–≤–∏–≥–∞—Ü–∏—è: 75%\nTransfer: 10%\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (–ø–æ –∂–µ–ª–∞–Ω–∏—é): —á–∞—Å—Ç–æ –ø–µ—Ä–µ–±–∏–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞"
        )
        return

    name = lines[0].strip()

    metrics = {}
    comment = ""
    for line in lines[1:]:
        if ':' in line:
            key, val = line.split(":", 1)
            metrics[key.strip()] = val.strip()
        else:
            comment += line.strip() + " "

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥—Ä—É–∂–µ–ª—é–±–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∏ —Ñ—Ä–∞–∑–∞–º–∏
    feedback = create_friendly_feedback(name, metrics, comment)

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å –≤ OpenRouter –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ AI-–∞–Ω–∞–ª–∏–∑–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # –ù–∏–∂–µ –ø—Ä–∏–º–µ—Ä —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º, –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏

    # headers = {
    #     "Authorization": f"Bearer {OPENROUTER_API_KEY}",
    #     "Content-Type": "application/json"
    # }
    # payload = {
    #     "model": "gpt-4o-mini",
    #     "messages": [
    #         {"role": "system", "content": SYSTEM_PROMPT},
    #         {"role": "user", "content": feedback}
    #     ],
    #     "temperature": 0.8
    # }
    #
    # try:
    #     async with httpx.AsyncClient() as client:
    #         response = await client.post(OPENROUTER_URL, json=payload, headers=headers)
    #         response.raise_for_status()
    #         data = response.json()
    #         ai_reply = data["choices"][0]["message"]["content"]
    #         await message.answer(ai_reply)
    #         return
    # except Exception as e:
    #     await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter API:\n<code>{str(e)}</code>")
    #     return

    # –ï—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º API, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    await message.answer(feedback)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
